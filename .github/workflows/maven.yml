name: Webgoat CI Jfrog yalin

on:
  workflow_dispatch:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: '2.56.1'

      - name: Verify JFrog CLI Installation
        run: jfrog -v

      - name: Verify Maven and Java Installation
        run: |
          mvn -v
          java -version

      - name: Check DNS Resolution
        run: nslookup soleng.jfrog.io

      - name: Configure JFrog CLI
        run: |
          jfrog config add my-server-id \
            --artifactory-url=${{ secrets.JF_URL }}/artifactory \
            --xray-url=https://soleng.jfrog.io/xray/ \
            --user=${{ secrets.JF_USER }} \
            --access-token=${{ secrets.JF_ACCESS_TOKEN }} \
            --interactive=false
          jfrog config use my-server-id

      - name: Ping Artifactory
        run: jfrog rt ping

      - name: Set Environment Variables
        run: |
          echo "repository=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV
          echo $repository

      - name: Maven Audit
        run: |
          jfrog audit --mvn --fail=false

      - name: Feature Branch Repository Update
        run: jfrog mvnc \
          --server-id-resolve=my-server-id \
          --repo-resolve-releases=dev_virtul_webgoat_mvn_ya \
          --repo-resolve-snapshots=dev_virtul_webgoat_mvn_ya \
          --repo-deploy-releases=dev_virtul_webgoat_mvn_ya \
          --repo-deploy-snapshots=dev_virtul_webgoat_mvn_ya

      - name: Maven Build
        run: |
          jfrog mvn clean install | tee maven_build.log

      - name: Upload Maven Build Log
        uses: actions/upload-artifact@v2
        with:
          name: maven-build-log
          path: maven_build.log

      - name: Log in to JFrog Artifactory Docker Registry
        run: docker login soleng.jfrog.io -u ${{ secrets.JF_USER }} --password "${{ secrets.JF_ACCESS_TOKEN }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: "linux/amd64,linux/arm64"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: build
        with:
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: soleng.jfrog.io/dev-ya-docker-webgoat-virtul/myappversion1:version1

  scan-repository:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ["main"]
    steps:
      - uses: jfrog/frogbot@v2
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.JF_GIT_TOKEN }}
          JF_GIT_BASE_BRANCH: ${{ matrix.branch }}
          JF_INCLUDE_ALL_VULNERABILITIES: "TRUE"

  mitigation-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: '2.56.1'

      - name: Configure JFrog CLI
        run: |
          jfrog config add mitigation-server \
            --artifactory-url=${{ secrets.JF_URL }}/artifactory \
            --xray-url=https://soleng.jfrog.io/xray/ \
            --user=${{ secrets.JF_USER }} \
            --access-token=${{ secrets.JF_ACCESS_TOKEN }} \
            --interactive=false
          jfrog config use mitigation-server

      - name: Ping Xray
        run: jfrog xr ping

      - name: Run Xray Audit and Save JSON
        run: |
          jfrog audit --mvn --format=json --output=scan-results.json --fail=false
          cat scan-results.json

      - name: Upload Xray Audit Report
        uses: actions/upload-artifact@v2
        with:
          name: mitigation-xray-scan
          path: scan-results.json

      - name: Fail on Critical Vulnerabilities
        run: |
          CRIT=$(jq '.vulnerabilities[] | select(.severity == "Critical")' scan-results.json | wc -l)
          echo "Number of critical vulns: $CRIT"
          if [ "$CRIT" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found. Failing the job."
            exit 1
          else
            echo "✅ No critical vulnerabilities found."
          fi
